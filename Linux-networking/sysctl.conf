#
# /etc/sysctl.conf - Configuration file for setting system variables
# See /etc/sysctl.d/ for additional system variables.
# See sysctl.conf (5) for information.
#

# Increase size of file handles and inode cache
fs.file-max = 2097152
# Do less swapping
vm.swappiness = 10
vm.dirty_ratio = 60
vm.dirty_background_ratio = 2
net.core.somaxconn = 4096
# Increase the maximum amount of option memory buffers 256M
net.core.optmem_max = 268435456
# Maximum Socket Send and Read Buffer
net.core.rmem_default = 212992
net.core.wmem_default = 212992
#256M
net.core.rmem_max = 268435456
net.core.wmem_max = 268435456
# To increase backlog for 10G NICS:
net.core.netdev_max_backlog = 30000

#    ipv4 system variables

###   CIPSOv4
#(安全等級標籤,決定溝通雙方要求資料的權限)
net.ipv4.cipso_cache_bucket_size = 10
net.ipv4.cipso_cache_enable = 1 
net.ipv4.cipso_rbm_optfmt = 0
net.ipv4.cipso_rbm_strictvalid = 1

##   **Configure .all for now using interface settings**
#(allow local packet, if two NIC wants to send packet.)
net.ipv4.conf.all.accept_local = 0 

#(Do not accept ICMP redirects for prevent **MITM*attacks =0)
net.ipv4.conf.all.accept_redirects = 0

#(true for allow Strict Source Route允許別人指定packet走的路徑-容易被導入有問題的router導致 ip spoofing, should turn off)

net.ipv4.conf.all.accept_source_route = 0

## ARP firewall settings  [reference]#(https://support.cumulusnetworks.com/hc/en-us/articles/203859616-Default-ARP-Settings-in-Cumulus-Linux)
#(Don't create new entries in the ARP table when receive unknown gratuitous ARP) 
net.ipv4.conf.all.arp_accept = 0

#(2 = allow ARP packets lie source IP when multi network interface)
net.ipv4.conf.all.arp_announce = 2

#(when multi network interfaces are on different IP networks =1,在多網卡情況 調整filter或ignore可以避免多網卡同時發出ARP reply造成類似multithread的value write conflict)
net.ipv4.conf.all.arp_filter = 0 

#(security problem should ignore ARP broadquest)
net.ipv4.conf.all.arp_ignore = 1 

#(send gratitous ARP when device change)
net.ipv4.conf.all.arp_notify = 1


## Routing settings
#(server dont have to be a router)
net.ipv4.conf.all.proxy_arp = 0

#(proxy_arp for private VLAN, check server structure)
net.ipv4.conf.all.proxy_arp_pvlan = 0

#(disallow IP forwarding, server dont have to be a router)
net.ipv4.conf.all.forwarding = 0
#ububtu1404 no this parameter
#net.ipv4.conf.all.mc_forwarding = 0 
#(Accept ICMP redirect messages only for default gateways,)
net.ipv4.conf.all.secure_redirects = 1

#(Do not send ICMP redirects, we are not a router)
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.all.route_localnet = 0 
#(not router)
net.ipv4.ip_forward = 0
#(Specify the group range allowed to create non-raw icmp sockets. default no body can ping ICMP socket)
net.ipv4.ping_group_range = 1	0
#( we can send maximum buset/cost ICMP Destination unreachables message /sec)
net.ipv4.route.error_burst = 1250
net.ipv4.route.error_cost = 250
net.ipv4.route.gc_elasticity = 8
net.ipv4.route.gc_interval = 60 
net.ipv4.route.gc_min_interval_ms = 500 
net.ipv4.route.gc_thresh = -1
net.ipv4.route.gc_timeout = 150
#(increase when use many interface and routers)
net.ipv4.route.max_size = 2147483647
#(The advertised MSS dynamic depends on the first hop route MTU, but will never be lower than this )
net.ipv4.route.min_adv_mss = 256 
#(minimum discovered Path MTU)
net.ipv4.route.min_pmtu = 552
#(cached PMTU information lived)
net.ipv4.route.mtu_expires = 600
net.ipv4.route.redirect_load = 5
net.ipv4.route.redirect_number = 9
net.ipv4.route.redirect_silence = 5120

## Protocol
#(for BOOTP protocol)
net.ipv4.conf.all.bootp_relay = 0
#(disable IPsec policy)
net.ipv4.conf.all.disable_policy = 0
#(disable IPSEC encryption)
net.ipv4.conf.all.disable_xfrm = 0
#(auto, or force use what IGMP version)
net.ipv4.conf.all.force_igmp_version = 0
#(Log Spoofed Packets, Source Routed Packets, Redirect Packets)
net.ipv4.conf.all.log_martians = 1 
#(used for check device id)
net.ipv4.conf.all.medium_id = 0
#(make secondary IP addresses promote when primary IP addresses are removed)
net.ipv4.conf.all.promote_secondaries = 0
#(enable source route verification) (Strict Reverse Path), prevent IP spoofing for **DDoS**)
net.ipv4.conf.all.rp_filter = 0
#(Indicates that the media is shared with different subnets, if secure_redirect =1, should = 1)
net.ipv4.conf.all.shared_media = 1
#(tell kernel to use packet mark, may cover rp_filter)
net.ipv4.conf.all.src_valid_mark = 1 
net.ipv4.conf.all.tag = 0 


##   **Configure default for future add-on machine settings, or specific NIC* 

## ICMP
#(Don't ignore directed pings, if must prohibit **ping*set as 1 prevent **ping flood attack**)
net.ipv4.icmp_echo_ignore_all = 0
#(only ignore broadcast ping)
net.ipv4.icmp_echo_ignore_broadcasts = 1
#(choose primary IP address to send ICMP packets)
net.ipv4.icmp_errors_use_inbound_ifaddr = 0
#(ignore the bogus error responses to save storage)
net.ipv4.icmp_ignore_bogus_error_responses = 1
#(chosen type ICMP packets limited rate per jiffie)
net.ipv4.icmp_ratelimit = 1000 
#(limit rates of which type ICMP packets, 6168=bitwised 0000001100000011000)
net.ipv4.icmp_ratemask = 6168 
#ubuntu14.04
net.ipv4.icmp_msgs_burst = 50
net.ipv4.icmp_msgs_per_sec = 1000


## IGMP settings
#(max number of total IGMP member across multi ICMP group)
net.ipv4.igmp_max_memberships = 20
#(max number of source filters, if connect more socket like IP_ADD_SOURCE_MEMBERSHIP, add this variable)
net.ipv4.igmp_max_msf = 10 
net.ipv4.igmp_qrv = 2

## inet peer
#(can remember peer's IP without router)
#(peer time to live)
net.ipv4.inet_peer_maxttl = 600
net.ipv4.inet_peer_minttl = 120

#(control INET peer datastructure AVL tree size, bigger size shorter ttl and gc time interval)
net.ipv4.inet_peer_threshold = 65664


## IP 
#(in slow network may set larger)
net.ipv4.ip_default_ttl = 64
#(support Dynamic address, but we don't need this)
net.ipv4.ip_dynaddr = 0
#(routing workload, should turn off), not in ubuntu14.04
# net.ipv4.ip_early_demux = 1
#(tcp/udp free port auto used by kernel, maximum 1024 to 65535, modified by policy: All processes should listen on the port out of this range)
net.ipv4.ip_local_port_range = 9198	61000
#(reserve listen ports)
#net.ipv4.ip_local_reserved_ports = 
#(enalbe Path MTU Discovery in most case, if router in PATH fail and no ICMP, should decrease the MTU and disable PMTU by hand)
net.ipv4.ip_no_pmtu_disc = 0
#(enable local process bind nonlocal IP, may be useful in dynamic network environment)
net.ipv4.ip_nonlocal_bind = 0


## **IP Fragmentation**
net.ipv4.ipfrag_high_thresh = 4194304
#(Maximum memory used to reassemble IP fragments)
net.ipv4.ipfrag_low_thresh = 3145728
#(Minimum memory used to reassemble IP fragments)
net.ipv4.ipfrag_max_dist = 64
#(max disorder fragment queue:set 0 or bigger than 16384)
#(Regeneration interval of the hash secret (or lifetime) for IP fragments) default:0
net.ipv4.ipfrag_secret_interval = 600
#(time in seconds to keep an IP fragment in memory, slow network enviroment should be longer, load balaning server should be smaller because the IP packet would not be big)
net.ipv4.ipfrag_time = 15


## **ARP table settings*important for gateway or proxy
net.ipv4.neigh.default.anycast_delay = 100
#(maximum number of jiffies to delay before replying)
net.ipv4.neigh.default.app_solicit = 0
#(probes to send to the user space ARP daemon)

# [ARP table GC process]#(http://stackoverflow.com/questions/15372011/configuring-arp-age-timeout)
net.ipv4.neigh.default.base_reachable_time_ms = 30000
#(如果符合失效條件後多久才送出probe in sec)
net.ipv4.neigh.default.delay_first_probe_time = 5
#(how fast garbage collection for ARP entries) 
net.ipv4.neigh.default.gc_interval = 30
#(如果被判定為stale之後,在cache存活gc_stale_time秒數後應該gc, if referenced by routing table, 被gc的時間又會被route.gc_time影響)
net.ipv4.neigh.default.gc_stale_time = 60
#(entries less than this gc will not start)
net.ipv4.neigh.default.gc_thresh1 = 1024
#(entries more than this gc will start after 5sec)
net.ipv4.neigh.default.gc_thresh2 = 2048
#(entries more than this, gc always run, also max size of ARP table )
net.ipv4.neigh.default.gc_thresh3 = 4096
#(ttl, minimum jiffies to keep an ARP entry in the cache. prevent ARP cache thrashing when error.不立即的刪除)
net.ipv4.neigh.default.locktime = 100
#(check alived multicast/broadcast times)
net.ipv4.neigh.default.mcast_solicit = 3
#(delay up how many jiffies before replying ARP request,  prevent **network flooding**)
net.ipv4.neigh.default.proxy_delay = 80
#(maximum number of packets which may be queued to proxy-ARP addresses.)
net.ipv4.neigh.default.proxy_qlen = 64
#(delay before retransmitting a reuest)
net.ipv4.neigh.default.retrans_time_ms = 1000
#(maximum size of packets queue for each unresolved address)
net.ipv4.neigh.default.ucast_solicit = 3 
#(In order to reduce a performance spike with relation to timestamps generation, increase it)
net.ipv4.neigh.default.unres_qlen_bytes = 65536
net.ipv4.neigh.default.unres_qlen = 31

## TCP
#(If listening service is too slow to accept new connections, reset them.)
net.ipv4.tcp_abort_on_overflow = 0

#(1/2^scale split memory for application memory, should>=2)
net.ipv4.tcp_adv_win_scale = 2

#(cubic is latest TCP congestion control algo version, used in high bandwidth networks with high latency ,reno allow Fast Retransmit and Fast Recovery )
net.ipv4.tcp_allowed_congestion_control = cubic reno 

#(1/2^32 TCP socket memory buffer for application buffer)
net.ipv4.tcp_app_win = 31

#(If MTU probing is enabled, this is the initial MSS used)
net.ipv4.tcp_base_mss = 512

#(Improving TCP's Robustness to Blind In-Window Attacks)
net.ipv4.tcp_challenge_ack_limit = 100

net.ipv4.tcp_congestion_control = cubic
#(delayed ER and TLP)
net.ipv4.tcp_early_retrans = 3

#(ECN allow the routers in PATH actively notify the TCP reciever the congestion to avoid packet losses)
net.ipv4.tcp_ecn = 2

#(allow selective ACK)
net.ipv4.tcp_sack = 1

#(Allows TCP to send "duplicate" Selective ACK, cascade with tcp_sack)
net.ipv4.tcp_dsack = 1

#(allow forward ACK, cascade with tcp_sack, sack add-ons help congestion control)
net.ipv4.tcp_fack = 1

#(allow fast TCP connection, client利用cookie#(IP and MAC加密),在reconnect 不用3 way handshake,省下1 RTT)
net.ipv4.tcp_fastopen = 1


net.ipv4.tcp_fin_timeout = 30 
#(F-RTO is an enhanced recovery algorithm for TCP retransmission timeouts. used when network unstable, RTT change scenario, conflict with MTU probe) 
net.ipv4.tcp_frto = 2


net.ipv4.tcp_keepalive_intvl = 15
net.ipv4.tcp_keepalive_probes = 3
net.ipv4.tcp_keepalive_time = 600
#(Controls TCP Small Queue limit per tcp socket. may affect GSO)
net.ipv4.tcp_limit_output_bytes = 131072


#(true for latency; high for throughput 以OS效率為優先, interrupt time 縮短, ack delay, socket delay)
net.ipv4.tcp_low_latency = 0

#(control the packets queue length, cost 64 bytes per entry, maxlen 65535)
net.ipv4.tcp_max_syn_backlog = 8192

#(Maximal number of timewait sockets, should larger)
net.ipv4.tcp_max_tw_buckets = 65536

# unit=PAGESIZE=4096Bytes; 可將一半的RAM用在這; in 8G host: 2,3,4 >3GB enter the "memory pressure" warning. MAX 4GB
net.ipv4.tcp_mem = 524288 786432 1048576

#(Minimal number of segments per TSO frame)
net.ipv4.tcp_min_tso_segs = 2

#(enable buffer auto-tuning)
net.ipv4.tcp_moderate_rcvbuf = 1

#(Enable TCP MTU Probing in order to deal with black hole routers)
net.ipv4.tcp_mtu_probing = 0

#(true for don't do connection cache)
net.ipv4.tcp_no_metrics_save = 0

#(sockets that no connect with any process
#(appliaction closed,but TCP still not fin), over half would warning may cost RAM 2GB, can increase this if warning)
net.ipv4.tcp_max_orphans = 65536
net.ipv4.tcp_orphan_retries = 1 
#(max reordering packets)
net.ipv4.tcp_reordering = 3

#(default on for solving TCP bug)
net.ipv4.tcp_retrans_collapse = 1

# Protect Against TCP Time-Wait
net.ipv4.tcp_retries1 = 3
net.ipv4.tcp_retries2 = 5

net.ipv4.tcp_rfc1337 = 1


#(slow start after time out)
net.ipv4.tcp_slow_start_after_idle = 1

#(old format on TCP urgent pointer field)
net.ipv4.tcp_stdurg = 0

#(**prevent syn flood==DDoS*if syn queue full, 不特地分配資源等待連線而是計算一個加密一個 cookie給對方, 最後驗證ACK的cookie是否合法)
net.ipv4.tcp_syn_retries = 3
net.ipv4.tcp_synack_retries = 3
net.ipv4.tcp_syncookies = 1
 
#(if true, reduce the dupACK threshold for fast retransmit)
net.ipv4.tcp_thin_dupack = 0
#(for thin stream)
net.ipv4.tcp_thin_linear_timeouts = 0

#(controls how much of the tcp congestion window is consumed by a single TSO frame)
net.ipv4.tcp_tso_win_divisor = 8

net.ipv4.tcp_tw_reuse = 1 
#(allow tcp window size >65535)
net.ipv4.tcp_window_scaling = 1

# set max to 16MB for 1GE, and 32M+ for 10GE:
net.ipv4.tcp_rmem = 4096 87380 33554432
net.ipv4.tcp_wmem = 4096 65536 33554432
